package com.huawei.xdevice.perfmodel.util;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.reflect.Method;

import org.json.JSONObject;


import android.app.Activity;
import android.content.Context;
import android.content.pm.PackageManager;
import android.graphics.Point;
import android.os.Build;
import android.telephony.MSimTelephonyManager;
import android.telephony.TelephonyManager;
import android.util.DisplayMetrics;
import android.util.Log;
import android.view.Display;

public class TeleUtil {
	
	private static final String TAG = "TeleUtil";
	public static DisplayMetrics metric = new DisplayMetrics();

	public static String getDisplayReolution( ){
		try {
			return execCommand("adb shell cat /proc/cpuinfo");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "error";
	}
	
	
	/**
	 * 得到屏幕高度
	 * 
	 * @param context
	 * @return
	 */
	public static int getScreenHeight(Activity context) {
		context.getWindowManager().getDefaultDisplay().getRealMetrics(metric);
		return metric.heightPixels;
	}
	 /**
	  * 得到屏幕宽度
	  * 
	  * @param context
	  * @return
	  */
	 public static int getScreenWidth(Activity context) {
	  context.getWindowManager().getDefaultDisplay().getRealMetrics(metric);
	  return metric.widthPixels;
	 }
	 
	 /**
	  * 得到屏幕密度
	  * 
	  * @param context
	  * @return
	  */
	 public static int getScreenDensity(Activity context) {
	  context.getWindowManager().getDefaultDisplay().getMetrics(metric);
	  return  metric.densityDpi;
	 }
	 
	 public static String getDisplayInfomation(Activity context) {
	      Point point = new Point();
	      context.getWindowManager().getDefaultDisplay().getSize(point);
	      return point.toString();
	  }
	 
	
	
	
	public static String execCommand(String command) throws IOException {
	    // start the ls command running
	    //String[] args =  new String[]{"sh", "-c", command};
	    Runtime runtime = Runtime.getRuntime();  
	    Process proc = runtime.exec(command);        //这句话就是shell与高级语言间的调用
	        //如果有参数的话可以用另外一个被重载的exec方法
	        //实际上这样执行时启动了一个子进程,它没有父进程的控制台
	        //也就看不到输出,所以我们需要用输出流来得到shell执行后的输出
	        InputStream inputstream = proc.getInputStream();
	        InputStreamReader inputstreamreader = new InputStreamReader(inputstream);
	        BufferedReader bufferedreader = new BufferedReader(inputstreamreader);
	        // read the ls output
	        String line = "";
	        StringBuilder sb = new StringBuilder(line);
	        while ((line = bufferedreader.readLine()) != null) {
	            //System.out.println(line);
	                sb.append(line);
	                sb.append('\n');
	        }
	        //tv.setText(sb.toString());
	        //使用exec执行不会等执行成功以后才返回,它会立即返回
	        //所以在某些情况下是很要命的(比如复制文件的时候)
	        //使用wairFor()可以等待命令执行完成以后才返回
	        try {
	            if (proc.waitFor() != 0) {
	                System.err.println("exit value = " + proc.exitValue());
	            }
	        }
	        catch (InterruptedException e) {  
	            System.err.println(e);
	        }
	        
	        return sb.toString();
	    }
	
	
	
	public static String getNetworkName(Context context) {
		String network = "";
		try {
			int simNo = 0;
			if (Helper.isMultiSIMEnabled(context)) {
				// 双卡手机
				Log.i(TAG, "phone type is double!");
				MSimTelephonyManager tel = ((MSimTelephonyManager) context
						.getSystemService("phone_msim"));
				network = tel.getNetworkOperatorName(simNo);
			} else {
				// 单卡手机
				Log.i(TAG, "phone type is single!");
				TelephonyManager mTelephonyManager = (TelephonyManager) context
						.getSystemService(Context.TELEPHONY_SERVICE);
				network = mTelephonyManager.getNetworkOperatorName();
			}
		} catch (Exception e) {
			Log.i(TAG, e.getClass().toString() + ":"
					+ e.getMessage().toString() + "; getNetworkName faild!");
		}

		return network;
	}
	
	
	
	// 判断机器Android是否已经root，即是否获取root权限
    public static String haveRoot() {
 
        int i = execRootCmdSilent("echo test"); // 通过执行测试命令来检测
        if (i != -1) {
            return "true";
        }
        return "false";
    }
    
	protected static int execRootCmdSilent(String paramString) {
        try {
            Process localProcess = Runtime.getRuntime().exec("su");
            Object localObject = localProcess.getOutputStream();
            DataOutputStream localDataOutputStream = new DataOutputStream(
                    (OutputStream) localObject);
            String str = String.valueOf(paramString);
            localObject = str + "\n";
            localDataOutputStream.writeBytes((String) localObject);
            localDataOutputStream.flush();
            localDataOutputStream.writeBytes("exit\n");
            localDataOutputStream.flush();
            localProcess.waitFor();
            int result = localProcess.exitValue();
            return (Integer) result;
        } catch (Exception localException) {
            localException.printStackTrace();
            return -1;
        }
    }
	
	
	
	/**
	 * 判断设备是否支持多点触控
	 * @param context
	 * @return
	 */
	public static boolean isSupportMultiTouch(Context context) {
		PackageManager pm = context.getPackageManager();
		boolean isSupportMultiTouch = pm.hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN_MULTITOUCH);
		return isSupportMultiTouch;
	}
	
	}
